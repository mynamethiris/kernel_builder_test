name: Building Kernel

on:
  workflow_dispatch:
    inputs:
      clang-repo: { description: "Enter the URL for the Clang source", type: string }
      gcc64-repo: { description: "Enter URL for the GCC 64-bit source", type: string }
      gcc32-repo: { description: "Enter URL for the GCC 32-bit source", type: string }
      kernel-repo: { description: "Enter URL for the Kernel source", required: true, type: string }
      anykernel3-repo: { description: "Enter URL for the AnyKernel3 source", type: string }
      more-flags: { description: "Enter additional build arguments", required: true, type: string }
      defconfig: { description: "Enter config file specific to your device", required: true, type: string }
      arch-type: { description: "Enter architecture type for the build", required: true, default: "ARCH=arm64 SUBARCH=arm32", type: string }
      build-type: { description: "Enter build type for the build", required: true, default: "UNSTABLE", type: choice, options: ["STABLE", "UNSTABLE" ,"KERNELSU"] }
      ksu-setup-script: { description: "Enter URL for the KernelSU setup script", type: string }

jobs:
  Build-and-Upload:
    runs-on: ubuntu-latest
    container:
      image: panchajanya1999/archlinux:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Environment Variables for Build
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLS_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC_PATH=gcc"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL_PATH=zipper"
            echo "KERNEL_BOOT_PATH=/out/arch/arm64/boot"
            echo "IMAGE={Image.gz-dtb,Image-dtb,Image.gz,Image,dtbo.img}"
            echo "BUILD_DIFF=0"
            } >> $GITHUB_ENV

      - name: Set Dependencies
        run: |
          sudo pacman -Sy --noconfirm git bc python3 flex bison libc++ libxml2 cpio jdk-openjdk tzdata

      - name: Get Toolchains
        run: |
          if [ -n "${{ inputs.clang-repo }}" ] && [ "${{ inputs.clang-repo }}" == "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.clang-repo }}" == "${{ inputs.gcc32-repo }}" ]; then
            echo "Clang, GCC64, and GCC32 URLs are the same, using tools path"
            TOOLCHAINS_REPO=${{ inputs.clang-repo }}
            TOOLS_SET=true
            if [[ "${{ inputs.clang-repo }}" == *.tar.* || "${{ inputs.clang-repo }}" == *.gz || "${{ inputs.clang-repo }}" == *.xz ]]; then
              echo "Toolchains file archive detected"
              mkdir -p ${{ env.TOOLS_PATH }}
              curl -RLO $TOOLCHAINS_REPO
              tar -C ${{ env.TOOLS_PATH }}/ -xf *.*
            else
              echo "Toolchains Repo detected"
              git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLS_PATH }}
            fi
          elif [ -n "${{ inputs.clang-repo }}" ]; then
            echo "Clang URL detected"
            CLANG_SET=true
            if [[ "${{ inputs.clang-repo }}" == *.tar.* || "${{ inputs.clang-repo }}" == *.gz || "${{ inputs.clang-repo }}" == *.xz ]]; then
              echo "Clang file archive detected"
              mkdir -p ${{ env.CLANG_PATH }}
              curl -RLO ${{ inputs.clang-repo }}
              tar -C ${{ env.CLANG_PATH }}/ -xf *.*
            else
              echo "Clang Repo detected"
              git clone --depth=1 ${{ inputs.clang-repo }} ${{ env.CLANG_PATH }}
            fi
            if [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs detected"
              if [ "${{ inputs.gcc64-repo }}" == "${{ inputs.gcc32-repo }}" ]; then
                echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
                GCC_REPO=${{ inputs.gcc64-repo }}
                GCC_SET=true
                if [[ "${{ inputs.gcc64-repo }}" == *.tar.* || "${{ inputs.gcc64-repo }}" == *.gz || "${{ inputs.gcc64-repo }}" == *.xz ]]; then
                  echo "GCC file archive detected"
                  mkdir -p ${{ env.GCC_PATH }}
                  curl -RLO $GCC_REPO
                  tar -C ${{ env.GCC_PATH }}/ -xf *.*
                else
                  echo "GCC Repo detected"
                  git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
                fi
              else
                GCC64_SET=true
                if [[ "${{ inputs.gcc64-repo }}" == *.tar.* || "${{ inputs.gcc64-repo }}" == *.gz || "${{ inputs.gcc64-repo }}" == *.xz ]]; then
                  echo "GCC 64-bit file archive detected"
                  mkdir -p ${{ env.GCC64_PATH }}
                  curl -RLO ${{ inputs.gcc64-repo }}
                  tar -C ${{ env.GCC64_PATH }}/ -xf *.*
                else
                  echo "GCC 64-bit Repo detected"
                  git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
                fi
              fi
              GCC32_SET=true
              if [[ "${{ inputs.gcc32-repo }}" == *.tar.* || "${{ inputs.gcc32-repo }}" == *.gz || "${{ inputs.gcc32-repo }}" == *.xz ]]; then
                echo "GCC 32-bit file archive detected"
                mkdir -p ${{ env.GCC32_PATH }}
                curl -RLO ${{ inputs.gcc32-repo }}
                tar -C ${{ env.GCC32_PATH }}/ -xf *.*
              else
                echo "GCC 32-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
              fi
            fi
          elif [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
            echo "GCC 64-bit and GCC 32-bit URLs detected"
            if [ "${{ inputs.gcc64-repo }}" == "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
              GCC_REPO=${{ inputs.gcc64-repo }}
              GCC_SET=true
              if [[ "${{ inputs.gcc64-repo }}" == *.tar.* || "${{ inputs.gcc64-repo }}" == *.gz || "${{ inputs.gcc64-repo }}" == *.xz ]]; then
                echo "GCC file archive detected"
                mkdir -p ${{ env.GCC_PATH }}
                curl -RLO $GCC_REPO
                tar -C ${{ env.GCC_PATH }}/ -xf *.*
              else
                echo "GCC Repo detected"
                git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
              fi
            else
              GCC64_SET=true
              if [[ "${{ inputs.gcc64-repo }}" == *.tar.* || "${{ inputs.gcc64-repo }}" == *.gz || "${{ inputs.gcc64-repo }}" == *.xz ]]; then
                echo "GCC 64-bit file archive detected"
                mkdir -p ${{ env.GCC64_PATH }}
                curl -RLO ${{ inputs.gcc64-repo }}
                tar -C ${{ env.GCC64_PATH }}/ -xf *.*
              else
                echo "GCC 64-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
              fi
            fi
            GCC32_SET=true
            if [[ "${{ inputs.gcc32-repo }}" == *.tar.* || "${{ inputs.gcc32-repo }}" == *.gz || "${{ inputs.gcc32-repo }}" == *.xz ]]; then
              echo "GCC 32-bit file archive detected"
              mkdir -p ${{ env.GCC32_PATH }}
              curl -RLO ${{ inputs.gcc32-repo }}
              tar -C ${{ env.GCC32_PATH }}/ -xf *.*
            else
              echo "GCC 32-bit Repo detected"
              git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
            fi
          else
            echo "No URLs detected or URLs are not valid, exiting"
            exit 1
          fi

      - name: Set Toolchains Path
        run: |
          if [ "$TOOLS_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/tools/bin"
          elif [ "$CLANG_SET" == "true" ] && [ "$GCC64_SET" == "true" ] && [ "$GCC32_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc64/bin:$GITHUB_WORKSPACE/gcc32/bin"
          elif [ "$CLANG_SET" == "true" ] && [ "$GCC64_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc64/bin"
          elif [ "$CLANG_SET" == "true" ] && [ "$GCC32_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc32/bin"
          elif [ "$CLANG_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/clang/bin"
          elif [ "$GCC64_SET" == "true" ] && [ "$GCC32_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/gcc64/bin:$GITHUB_WORKSPACE/gcc32/bin"
          elif [ "$GCC64_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/gcc64/bin"
          elif [ "$GCC32_SET" == "true" ]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/gcc32/bin"
          fi
          echo "TOOLCHAINS_PATH=$TOOLCHAINS_PATH" >> $GITHUB_ENV

      - name: Clone Kernel Source
        run: |
          if [ -n "${{ inputs.kernel-repo }}" ]; then
            echo "Kernel Repo detected"
            git clone --depth=1 ${{ inputs.kernel-repo }} ${{ env.KERNEL_PATH }}
            cd "${{ env.KERNEL_PATH }}"
            if [ -f ".gitmodules" ]; then
              git submodule update --init --recursive
            fi
          else
            echo "Kernel URL is not valid, exiting"
            exit 1
          fi

      - name: Install KernelSU (if build type is KernelSU)
        if: inputs.build-type == 'KERNELSU'
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f ".gitmodules" ]; then
            if grep -q '\b.*KernelSU.*\b' ".gitmodules"; then
              echo "KernelSU submodule detected"
              git submodule update --init --recursive
            else
              echo "No KernelSU submodule detected"
            fi
          elif [ -n "${{ inputs.ksu-setup-script }}" ] && [ -n "${{ inputs.build-type }}" == "KERNELSU" ]; then
            echo "KernelSU setup script detected"
            "${{ inputs.ksu-setup-script }}"
          else
            echo "KernelSU Setup script is not found or not Valid, skipping KernelSU build"
          fi

      - name: Get Kernel Information
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -n "$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}" | tr -d '"' | sed 's/^-//' | tr -d '\r\n')" ]; then
            KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}" | tr -d '"' | sed 's/^-//' | tr -d '\r\n') >> $GITHUB_ENV
          fi
          if [ -n "$(make kernelversion)" ]; then
            echo "KERNEL_VERSION=$(make kernelversion)" >> $GITHUB_ENV
          fi
          if [ -n "$(git log -1 --pretty="%h")" ]; then
            echo "LATEST_COMMIT=$(git log -1 --pretty="%h")" >> $GITHUB_ENV
          fi
          if [ -n "${{ env.KERNEL_NAME }}" ] && [ -n "${{ env.KERNEL_VERSION }}" ]; then
            echo "ZIP_NAME=${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.LATEST_COMMIT }}" >> $GITHUB_ENV
          fi

      - name: Compile the Kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          KBUILD_BUILD_USER="${{ env.USER }}"
          KBUILD_BUILD_HOST="${{ env.HOST }}"
          PATH="${{ env.TOOLCHAINS_PATH }}:${PATH}"

          make O=out ${{ inputs.arch-type }} ${{ inputs.defconfig }}
          make O=out -j$(nproc --all) ${{ inputs.more-flags }}
          if [ -f "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
            echo "Found Image, build is successful"
          else
            echo "Image not found, exiting"
            exit 1
          fi

      - name: Zip the Compiled Kernel
        if: inputs.anykernel3-repo != ''
        run: |
          git clone --depth=1 ${{ inputs.anykernel3-repo }} "${{ env.ANYKERNEL_PATH }}"
          if [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
            cp "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" "${{ env.ANYKERNEL_PATH }}/${{ env.IMAGE }}"
            MD5_CHECK=$(md5sum "${{ env.ZIP_NAME }}.zip" | cut -d' ' -f1)
          else
            echo "Image not found or broken, exiting"
            exit 1
          fi

      - name: Upload Kernel to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.BUILD_TYPE }}
          path: ${{ env.ANYKERNEL_PATH }}/* || ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}
