name: Building Kernel

on:
  workflow_dispatch:
    inputs:
      clang-repo: { description: "Enter the URL for the Clang source", type: string }
      gcc64-repo: { description: "Enter URL for the GCC 64-bit source", type: string }
      gcc32-repo: { description: "Enter URL for the GCC 32-bit source", type: string }
      kernel-repo: { description: "Enter URL for the Kernel source", required: true, type: string }
      anykernel3-repo: { description: "Enter URL for the Anykernel3 source", type: string }
      toolchains-path: { description: "Enter the PATH for the Toolchains", required: true, type: string }
      more-flags: { description: "Enter additional build arguments", required: true, type: string }
      defconfig: { description: "Enter config file specific to your device", required: true, type: string }
      build-type: { description: "Enter Build Type for the build", required: true, default: "UNSTABLE", type: choice, options: ["STABLE", "UNSTABLE" ,"KERNELSU"] }
      ksu-setup-script: { description: "Enter URL for the KernelSU setup", type: string }

jobs:
  Build-and-Upload:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Set Up Environment Variables for Build
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLCHAINS_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC_PATH=gcc"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL_PATH=zipper"
            echo "KERNEL_BOOT_PATH=/out/arch/arm64/boot"
            echo "IMAGE={Image.gz-dtb,Image-dtb,Image.gz,Image,dtbo.img}"
            echo "MSG_URL=https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
            echo "DOC_URL=https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument"
            echo "DATE=$(TZ=Asia/Jakarta date +"%Y%m%d - %H:%M")"
            echo "BUILD_TYPE=${{ inputs.build-type }}"
            echo "BUILD_DIFF=0"
            } >> $GITHUB_ENV

      - name: Get Toolchains
        id: get-toolchains
        run: |
          if [ -n "${{ inputs.clang-repo }}" ] && [ "${{ inputs.clang-repo }}" = "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.clang-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
            echo "Clang, GCC64, and GCC32 URLs are the same, using tools path"
            TOOLCHAINS_REPO=${{ inputs.clang-repo }}
            git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLCHAINS_PATH }}
          elif [ -n "${{ inputs.clang-repo }}" ]; then
            echo "Clang URL detected"
            if [[ "${{ inputs.clang-repo }}" == *.tar.gz ]]; then
            echo "Clang Tarball detected"
              mkdir -p ${{ env.CLANG_PATH }}
              curl -RLO ${{ inputs.clang-repo }}
              tar -C ${{ env.CLANG_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              echo "Clang Repo detected"
              git clone --depth=1 ${{ inputs.clang-repo }} ${{ env.CLANG_PATH }}
            fi
            if [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs detected"
              if [ -n "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.gcc64-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
                echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
                GCC_REPO=${{ inputs.gcc64-repo }}
                git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
              else
                if [[ "${{ inputs.gcc64-repo }}" == *.tar.gz ]]; then
                  echo "GCC 64-bit Tarball detected"
                  mkdir -p ${{ env.GCC64_PATH }}
                  curl -RLO ${{ inputs.gcc64-repo }}
                  tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
                  rm -f *.tar.gz
                else
                  echo "GCC 64-bit Repo detected"
                  git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
                fi
              fi
              if [[ "${{ inputs.gcc32-repo }}" == *.tar.gz ]]; then
                echo "GCC 32-bit Tarball detected"
                mkdir -p ${{ env.GCC32_PATH }}
                curl -RLO ${{ inputs.gcc32-repo }}
                tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                echo "GCC 32-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
              fi
            fi
          elif [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
            echo "GCC 64-bit and GCC 32-bit URLs detected"
            if [ -n "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.gcc64-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
              GCC_REPO=${{ inputs.gcc64-repo }}
              git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
            else
              if [[ "${{ inputs.gcc64-repo }}" == *.tar.gz ]]; then
                echo "GCC 64-bit Tarball detected"
                mkdir -p ${{ env.GCC64_PATH }}
                curl -RLO ${{ inputs.gcc64-repo }}
                tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                echo "GCC 64-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
              fi
            fi
            if [[ "${{ inputs.gcc32-repo }}" == *.tar.gz ]]; then
              echo "GCC 32-bit Tarball detected"
              mkdir -p ${{ env.GCC32_PATH }}
              curl -RLO ${{ inputs.gcc32-repo }}
              tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              echo "GCC 32-bit Repo detected"
              git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
            fi
          else
            echo "No URLs detected or URLs are not Valid, exiting"
            exit 1
          fi

      - name: Clone Kernel Source
        id: clone-kernel
        run: |
          if [ -n "${{ inputs.kernel-repo }}" ]; then
            echo "Kernel Repo detected"
            git clone --depth=1 ${{ inputs.kernel-repo }} ${{ env.KERNEL_PATH }}
            cd "${{ env.KERNEL_PATH }}"
            if [ -f ".gitmodules" ]; then
              git submodule update --init --recursive
            fi
          else
            echo "Kernel URL is not Valid, exiting"
            exit 1
          fi

      - name: Install KernelSU (if build type is KernelSU)
        id: install-ksu
        if: inputs.build-type == 'KERNELSU'
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f ".gitmodules" ]; then
            if grep -q '\b.*KernelSU.*\b' ".gitmodules"; then
              echo "KernelSU submodule detected"
              git submodule update --init --recursive
            else
              echo "No KernelSU submodule detected"
            fi
          elif [ -n "${{ inputs.ksu-setup-script }}" ] && [ -n "${{ inputs.build-type }}" == "KERNELSU" ]; then
            echo "KernelSU setup script detected"
            "${{ inputs.ksu-setup-script }}"
          else
            echo "KernelSU Setup script is not found or not Valid, skipping KernelSU build"
          fi

      - name: Get Kernel Information
        id: get-info
        run: |
          cd "${{ env.KERNEL_PATH }}" || exit 1

          if [ -f "arch/arm64/configs/${{ inputs.defconfig }}" ]; then
            KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}" | tr -d '"' | sed 's/^-//' | tr -d '\r\n')
            echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
          fi

          LINUX_VERSION=$(make kernelversion 2>/dev/null)
          echo "LINUX_VERSION=$LINUX_VERSION" >> $GITHUB_ENV

          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          LATEST_COMMIT=$(git log -1 --pretty="%h %s" 2>/dev/null)
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV

          if [ -n "$BUILD_END" ] && [ -n "$BUILD_START" ]; then
            BUILD_DIFF=$((BUILD_END - BUILD_START))
            echo "BUILD_DIFF=$BUILD_DIFF" >> $GITHUB_ENV
          fi

          if [ -n "${{ env.KERNEL_NAME }}" ] && [ -n "${{ env.LINUX_VERSION }}" ]; then
            ZIP_NAME=${{ env.KERNEL_NAME }}-${{ env.LINUX_VERSION }}
            echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          fi

      - name: Clean Up the Kernel
        id: clean-kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          make O=out clean
          make O=out mrproper

      - name: Compile the Kernel
        id: compile-kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          BUILD_START="$(TZ=Asia/Jakarta date +"%s")"
          export KBUILD_BUILD_USER="${{ env.USER }}"
          export KBUILD_BUILD_HOST="${{ env.HOST }}"
          export PATH="${{ inputs.toolchains-path }}:${PATH}"

          make O=out ARCH=arm64 ${{ inputs.defconfig }}
          make O=out -j$(nproc --all) ${{ inputs.more-flags }} 2>&1 | tee build.log
          BUILD_END="$(TZ=Asia/Jakarta date +"%s")"

      - name: Zip the Compiled Kernel
        id: zip-kernel
        if: inputs.anykernel3-repo != '' && steps.compile-kernel.conclusion == 'success'
        run: |
          git clone --depth=1 ${{ inputs.anykernel3-repo }} "${{ env.ANYKERNEL_PATH }}"
          if [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
            cp "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" "${{ env.ANYKERNEL_PATH }}/${{ env.IMAGE }}"
            zip -r9 "${{ env.ZIP_NAME }}" * -x .git README.md anykernel-real.sh .gitignore *.zip
            MD5_CHECK=$(md5sum "${{ env.ZIP_NAME }}.zip" | cut -d' ' -f1)
          else
            echo "Image not found or broken, exiting"
            exit 1
          fi

      - name: Set Build Status and Message
        id: set-notify
        if: success() || failure() || cancelled()
        run: |
          if [ -n ${{ secrets.TELEGRAM_TO }} ] && [ -n ${{ secrets.TELEGRAM_TOKEN }} ]; then
            if [ "${{ job.status }}" = "success" ]; then
              echo "STATUS=✅ Build Successful!" >> $GITHUB_ENV
            elif [ "${{ job.status }}" = "failure" ]; then
              echo "STATUS=❌ Build Failed!" >> $GITHUB_ENV
            elif [ "${{ job.status }}" = "cancelled" ]; then
              echo "STATUS=❌ Build Cancelled!" >> $GITHUB_ENV
            fi
          fi

      - name: Check more Information before Notify and Sending
        id: check-kernel
        if: success() || failure() || cancelled()
        run: |
          if [ -n ${{ secrets.TELEGRAM_TO }} ] && [ -n ${{ secrets.TELEGRAM_TOKEN }} ]; then
            if [ "${{ job.status }}" = "success" ]; then
              echo "BUILD_STATUS=true" >> $GITHUB_ENV
              if [ -f "${{ env.ANYKERNEL_PATH }}/${{ env.ZIP_NAME }}.zip" ]; then
                echo "KERNEL_STATUS=true" >> $GITHUB_ENV
                echo "KERNEL_DOC=${{ env.ANYKERNEL_PATH }}/${{ env.ZIP_NAME }}.zip" >> $GITHUB_ENV
              elif [ -f "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
                echo "KERNEL_STATUS=true" >> $GITHUB_ENV
                echo "KERNEL_DOC=${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" >> $GITHUB_ENV
              else
                echo "KERNEL_STATUS=false" >> $GITHUB_ENV
                echo "Kernel not found, exiting"
                exit 1
              fi
            fi
            if [ "${{ job.status }}" = "failure" ] || [ "${{ job.status }}" = "cancelled" ]; then
              echo "BUILD_STATUS=false" >> $GITHUB_ENV
              if [ -f "${{ env.KERNEL_PATH }}/build.log" ]; then
                echo "LOG_STATUS=true" >> $GITHUB_ENV
              else
                echo "LOG_STATUS=false" >> $GITHUB_ENV
              fi
            fi
          fi

      - name: Notify to Telegram if Build Successful
        id: notify-if-success
        if: github.env.BUILD_STATUS == 'true' && github.secrets.TELEGRAM_TO != '' && github.secrets.TELEGRAM_TOKEN != ''
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ${{ env.STATUS }}
            Kernel Name: `${{ env.KERNEL_NAME }}`
            Kernel Version: `${{ env.LINUX_VERSION }}`
            Branch Name: `${{ env.BRANCH_NAME }}`
            Latest Commit: `${{ env.LATEST_COMMIT }}`
            Build Type: `${{ env.BUILD_TYPE }}`
            Date: `${{ env.DATE }}`

      - name: Send Kernel to Telegram
        id: upload-kernel-and-notify
        if: github.steps.notify-if-success.conclusion == 'success' && github.secrets.TELEGRAM_TO != '' && github.secrets.TELEGRAM_TOKEN != ''
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ env.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          document: ${{ env.ANYKERNEL_PATH }}/${{ env.ZIP_NAME }}.zip || ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}
          message_file: |
            Build Time: `${{ env.BUILD_DIFF }}`
            MD5: `${{ env.MD5_CHECK }}`

      - name: Notify to Telegram if Build not Successful
        id: notify-if-not-success
        if: github.env.BUILD_STATUS == 'false' && github.secrets.TELEGRAM_TO != '' && github.secrets.TELEGRAM_TOKEN != ''
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ${{ env.STATUS }}
            Kernel Name: `${{ env.KERNEL_NAME }}`
            Kernel Version: `${{ env.LINUX_VERSION }}`
            Branch Name: `${{ env.BRANCH_NAME }}`
            Latest Commit: `${{ env.LATEST_COMMIT }}`
            Build Type: `${{ env.BUILD_TYPE }}`
            Date: `${{ env.DATE }}`

      - name: Send Error log to Telegram
        id: upload-log-and-notify
        if: github.env.LOG_STATUS == 'true' && github.steps.notify-if-not-success.conclusion == 'success' && github.secrets.TELEGRAM_TO != '' && github.secrets.TELEGRAM_TOKEN != ''
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ env.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          document: ${{ env.KERNEL_PATH }}/build.log
          message_file: |
            Build Time: `${{ env.BUILD_DIFF }}`

      - name: Upload Kernel to Artifact
        id: upload-artifact-original
        if: github.secrets.TELEGRAM_TO == '' || github.secrets.TELEGRAM_TOKEN == '' || github.secrets.TOPIC_ID == '' || github.secrets.TELEGRAM_TO != '-100*' || inputs.BUILD_TYPE != 'BOTH'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.BUILD_TYPE }}
          path: ${{ env.ANYKERNEL_PATH }}/* || ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}
