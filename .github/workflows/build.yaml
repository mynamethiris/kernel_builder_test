name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      clang-url:
        description: "Enter the URL for Clang source (tar.gz or git repository)"
        type: string
      gcc64-url:
        description: "Enter the URL for GCC 64-bit source (tar.gz or git repository)"
        type: string
      gcc32-url:
        description: "Enter the URL for GCC 32-bit source (tar.gz or git repository)"
        type: string
      kernel-url:
        description: "Enter the URL for Kernel source (git repository)"
        required: true
        type: string
      defconfig:
        description: "Enter the name of the configuration file (e.g. DEVICE_defconfig)"
        required: true
        type: string
      anykernel3-url:
        description: "Enter the URL for AnyKernel3 source (git repository)"
        type: string
      flags:
        description: "Enter the build arguments for make (e.g. ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-)"
        required: true
        type: string
      image-type:
        description: "Enter the type of kernel image to upload (e.g. Image.gz-dtb, Image-dtb, Image.gz, Image, dtbo.img)"
        required: true
        default: "Image.gz-dtb"
        type: string
      ksu-setup-script:
        description: "Enter the URL for KernelSU setup script (alternative to submodule)"
        type: string

jobs:
  Deploy-Kernel:
    runs-on: ubuntu-22.04

    steps:
      - name: Initialize Environment Variables for Compilation
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLS_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC_PATH=gcc"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL3_PATH=zipper"
            echo "KERNEL_BOOT_PATH=out/arch/arm64/boot"
          } >> $GITHUB_ENV

      - name: Get Toolchains
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ -n "${{ inputs.clang-url }}" ] && [ "${{ inputs.clang-url }}" == "${{ inputs.gcc64-url }}" ] && [ "${{ inputs.clang-url }}" == "${{ inputs.gcc32-url }}" ]; then
            echo "Clang, GCC64, and GCC32 URLs are the same, using tools path"
            TOOLCHAINS_REPO=${{ inputs.clang-url }}
            echo "TOOLS_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.clang-url }}" == *.tar.* || "${{ inputs.clang-url }}" == *.gz || "${{ inputs.clang-url }}" == *.xz ]]; then
              echo "Toolchains file archive detected"
              mkdir -p ${{ env.TOOLS_PATH }}
              wget -q $TOOLCHAINS_REPO
              tar -C ${{ env.TOOLS_PATH }}/ -xf *.*
            else
              echo "Toolchains Repo detected"
              git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLS_PATH }}
            fi
          elif [ -n "${{ inputs.clang-url }}" ]; then
            echo "Clang URL detected"
            echo "CLANG_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.clang-url }}" == *.tar.* || "${{ inputs.clang-url }}" == *.gz || "${{ inputs.clang-url }}" == *.xz ]]; then
              echo "Clang file archive detected"
              mkdir -p ${{ env.CLANG_PATH }}
              wget -q ${{ inputs.clang-url }}
              tar -C ${{ env.CLANG_PATH }}/ -xf *.*
            else
              echo "Clang Repo detected"
              git clone --depth=1 ${{ inputs.clang-url }} ${{ env.CLANG_PATH }}
            fi
            if [ -n "${{ inputs.gcc64-url }}" ] && [ -n "${{ inputs.gcc32-url }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs detected"
              if [ "${{ inputs.gcc64-url }}" == "${{ inputs.gcc32-url }}" ]; then
                echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
                GCC_REPO=${{ inputs.gcc64-url }}
                echo "GCC_SET=true" >> $GITHUB_ENV
                if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                  echo "GCC file archive detected"
                  mkdir -p ${{ env.GCC_PATH }}
                  wget -q $GCC_REPO
                  tar -C ${{ env.GCC_PATH }}/ -xf *.*
                else
                  echo "GCC Repo detected"
                  git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
                fi
              else
                echo "GCC64_SET=true" >> $GITHUB_ENV
                if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                  echo "GCC 64-bit file archive detected"
                  mkdir -p ${{ env.GCC64_PATH }}
                  wget -q ${{ inputs.gcc64-url }}
                  tar -C ${{ env.GCC64_PATH }}/ -xf *.*
                else
                  echo "GCC 64-bit Repo detected"
                  git clone --depth=1 ${{ inputs.gcc64-url }} ${{ env.GCC64_PATH }}
                fi
              fi
              echo "GCC32_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc32-url }}" == *.tar.* || "${{ inputs.gcc32-url }}" == *.gz || "${{ inputs.gcc32-url }}" == *.xz ]]; then
                echo "GCC 32-bit file archive detected"
                mkdir -p ${{ env.GCC32_PATH }}
                wget -q ${{ inputs.gcc32-url }}
                tar -C ${{ env.GCC32_PATH }}/ -xf *.*
              else
                echo "GCC 32-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc32-url }} ${{ env.GCC32_PATH }}
              fi
            fi
          elif [ -n "${{ inputs.gcc64-url }}" ] && [ -n "${{ inputs.gcc32-url }}" ]; then
            echo "GCC 64-bit and GCC 32-bit URLs detected"
            if [ "${{ inputs.gcc64-url }}" == "${{ inputs.gcc32-url }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
              GCC_REPO=${{ inputs.gcc64-url }}
              echo "GCC_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                echo "GCC file archive detected"
                mkdir -p ${{ env.GCC_PATH }}
                wget -q $GCC_REPO
                tar -C ${{ env.GCC_PATH }}/ -xf *.*
              else
                echo "GCC Repo detected"
                git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
              fi
            else
              echo "GCC64_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                echo "GCC 64-bit file archive detected"
                mkdir -p ${{ env.GCC64_PATH }}
                wget -q ${{ inputs.gcc64-url }}
                tar -C ${{ env.GCC64_PATH }}/ -xf *.*
              else
                echo "GCC 64-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc64-url }} ${{ env.GCC64_PATH }}
              fi
            fi
            echo "GCC32_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.gcc32-url }}" == *.tar.* || "${{ inputs.gcc32-url }}" == *.gz || "${{ inputs.gcc32-url }}" == *.xz ]]; then
              echo "GCC 32-bit file archive detected"
              mkdir -p ${{ env.GCC32_PATH }}
              wget -q ${{ inputs.gcc32-url }}
              tar -C ${{ env.GCC32_PATH }}/ -xf *.*
            else
              echo "GCC 32-bit Repo detected"
              git clone --depth=1 ${{ inputs.gcc32-url }} ${{ env.GCC32_PATH }}
            fi
          else
            echo "No URLs detected or URLs are not valid, exiting"
            exit 1
          fi

      - name: Configure Toolchain Paths
        run: |
          cd "$GITHUB_WORKSPACE"
          if [[ "${{ env.TOOLS_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.TOOLS_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC_PATH }}/bin"
          elif [[ "${{ env.GCC_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC64_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC64_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin"
          elif [[ "${{ env.GCC64_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.GCC64_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin"
          elif [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          fi
          if [ "$TOOLCHAINS_PATH" != '' ]; then
            echo "TOOLCHAINS_PATH=$TOOLCHAINS_PATH" >> $GITHUB_ENV
          else
            echo "No Toolchains detected or URLs are not valid, exiting"
            exit 1
          fi

      - name: Clone the Kernel Source
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ -n "${{ inputs.kernel-url }}" ]; then
            echo "Kernel Repo detected"
            git clone --depth=1 ${{ inputs.kernel-url }} ${{ env.KERNEL_PATH }}
            cd "${{ env.KERNEL_PATH }}"
            if [ -f ".gitmodules" ]; then
              git submodule update --init --recursive
            fi
          else
            echo "Kernel URL is not valid, exiting"
            exit 1
          fi

      - name: Apply KernelSU Patch (if KSU Setup Script is provided)
        if: inputs.ksu-setup-script != ''
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f "*KernelSU*" ]; then
            rm -rf *KernelSU*
          fi
          if [ -f "drivers/kernelsu" ]; then
            rm -rf drivers/kernelsu
          fi
          ${{ inputs.ksu-setup-script }}

      - name: Get Kernel Information
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -n "$(grep -oP 'CONFIG_LOCALVERSION=-\K.*' "arch/arm64/configs/${{ inputs.defconfig }}")" ]; then
            echo "KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}")" >> $GITHUB_ENV
          else
            echo "KERNEL_NAME=UNKNOWN" >> $GITHUB_ENV
          fi
          if [ -n "$(make kernelversion)" ]; then
            echo "KERNEL_VERSION=$(make kernelversion)" >> $GITHUB_ENV
          else
            echo "KERNEL_VERSION=UNKNOWN" >> $GITHUB_ENV
          fi

      - name: Clean the Kernel Source
        run: |
          cd "${{ env.KERNEL_PATH }}"
          mkdir -p out
          make O=out clean

      - name: Compile the Kernel Source
        run: |
          cd "${{ env.KERNEL_PATH }}"
          KBUILD_BUILD_USER="${{ env.USER }}"
          KBUILD_BUILD_HOST="${{ env.HOST }}"
          PATH="${{ env.TOOLCHAINS_PATH }}:${PATH}"

          if [[ "${{ inputs.flags }}" == *ARCH=* ]]; then
            ARCH=$(echo "${{ inputs.flags }}" | cut -d' ' -f1 | cut -d'=' -f2-)
            if [[ "${{ inputs.flags }}" == *SUBARCH=* ]]; then
              SUBARCH=$(echo "${{ inputs.flags }}" | cut -d' ' -f2 | cut -d'=' -f2-)
            fi
          fi

          make ${{ inputs.defconfig }} O=out
          make -j$(nproc --all) O=out ${{ inputs.flags }}

          if [ -f "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" ]; then
            echo "Compilation successful, kernel image found"
          else
            echo "Compilation failed or image not found, exiting"
            exit 1
          fi

      - name: Package the Compiled Kernel Source (if AnyKernel3 URL is provided)
        if: inputs.anykernel3-url != ''
        run: |
          cd "${{ env.ANYKERNEL3_PATH }}"
          git clone --depth=1 ${{ inputs.anykernel3-url }} "${{ env.ANYKERNEL3_PATH }}"
          if [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" ]; then
            cp "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" "${{ env.ANYKERNEL3_PATH }}/${{ inputs.image-type }}"
            echo "ZIP_NAME=${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
            zip -r9 "${{ env.ZIP_NAME }}" * -x .git README.md anykernel-real.sh .gitignore *.zip
          else
            echo "Kernel image not found, exiting"
            exit 1
          fi

      - name: Sign the Compiled Kernel Source (if AnyKernel3 URL is provided)
        if: inputs.anykernel3-url != ''
        run: |
          cd ${{ env.ANYKERNEL3_PATH }}
          curl -sLo zipsigner-3.0.jar https://github.com/Magisk-Modules-url/zipsigner/raw/master/bin/zipsigner-3.0-dexed.jar
          java -jar zipsigner-3.0.jar "${{ env.ZIP_NAME }}".zip

      - name: Upload Kernel to Artifact (if AnyKernel3 URL is provided)
        if: inputs.anykernel3-url != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ANYKERNEL3_PATH }}/${{ env.ZIP_NAME }}.zip

      - name: Upload Kernel to Artifact (if AnyKernel3 URL is not provided)
        if: inputs.anykernel3-url == ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}
