name: Building Kernel

on:
  workflow_dispatch:
    inputs:
      toolchains-repo: { description: "Enter URL for a prebuilt toolchain bundle", type: string }
      clang-repo: { description: "Enter the clang link", type: string }
      gcc64-repo: { description: "Enter URL for GCC 64-bit source", type: string }
      gcc32-repo: { description: "Enter URL for GCC 32-bit source", type: string }
      kernel-repo: { description: "Enter URL for the Kernel source", required: true, type: string }
      anykernel3-repo: { description: "Enter URL for the Anykernel3 source", required: true, type: string }
      toolchains-path: { description: "Enter the PATH for executables", required: true, type: string }
      more-flags: { description: "Enter additional build arguments or compiler flags", required: true, type: string }
      defconfig: { description: "Enter config file specific to your device ", required: true, type: string }
      ksu-setup-script: { description: "Enter URL for the KernelSU setup", type: string }

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Environment Variables for Build
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLCHAINS_REPO_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL_PATH=zipper"
          } >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y bc bison ca-certificates flex libc6-dev libssl-dev openssl clang gcc-arm-linux-gnueabi software-properties-common build-essential libarchive-tools gcc-aarch64-linux-gnu build-essential libssl-dev libncurses5-dev zlib1g zlib1g-dev libreadline-dev libbz2-dev libsqlite3-dev python3 lld

      - name: Clone Toolchains
        env:
          TOOLCHAINS_REPO: ${{ inputs.toolchains-repo }}
          CLANG_REPO: ${{ inputs.clang-repo }}
          GCC64_REPO: ${{ inputs.gcc64-repo }}
          GCC32_REPO: ${{ inputs.gcc32-repo }}
        run: |
          if [ -n "$TOOLCHAINS_REPO" ]; then
            git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLCHAINS_REPO_PATH }}

          elif [ -n "$CLANG_REPO" ]; then
            if [[ "$CLANG_REPO" == *.tar.gz ]]; then
              mkdir -p ${{ env.CLANG_PATH }}
              curl -RLO $CLANG_REPO
              tar -C ${{ env.CLANG_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              git clone --depth=1 $CLANG_REPO ${{ env.CLANG_PATH }}
            fi

            if [ -n "$GCC64_REPO" ] && [ -n "$GCC32_REPO" ]; then
              if [[ "$GCC64_REPO" == *.tar.gz ]]; then
                mkdir -p ${{ env.GCC64_PATH }}
                curl -RLO $GCC64_REPO
                tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                git clone --depth=1 $GCC64_REPO ${{ env.GCC64_PATH }}
              fi

              if [[ "$GCC32_REPO" == *.tar.gz ]]; then
                mkdir -p ${{ env.GCC32_PATH }}
                curl -RLO $GCC32_REPO
                tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                git clone --depth=1 $GCC32_REPO ${{ env.GCC32_PATH }}
              fi
            fi

          elif [ -n "$GCC64_REPO" ] && [ -n "$GCC32_REPO" ]; then
            if [[ "$GCC64_REPO" == *.tar.gz ]]; then
              mkdir -p ${{ env.GCC64_PATH }}
              curl -RLO $GCC64_REPO
              tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              git clone --depth=1 $GCC64_REPO ${{ env.GCC64_PATH }}
            fi

            if [[ "$GCC32_REPO" == *.tar.gz ]]; then
              mkdir -p ${{ env.GCC32_PATH }}
              curl -RLO $GCC32_REPO
              tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              git clone --depth=1 $GCC32_REPO ${{ env.GCC32_PATH }}
            fi

          else
            exit 1
          fi

      - name: Clone Kernel Source and Install KernelSU
        env: 
          KERNEL_REPO: ${{ inputs.kernel-repo }}
          DEFCONFIG: ${{ inputs.defconfig }}
          KERNELSU_SETUP_SCRIPT: ${{ inputs.ksu-setup-script }}
        run: |
          cd $GITHUB_WORKSPACE
          git clone --depth=1 $KERNEL_REPO ${{ env.KERNEL_PATH }}

          cd "${{ env.KERNEL_PATH }}"
          if [ -f ".gitmodules" ]; then
            if grep -q '\b.*KernelSU.*\b' ".gitmodules"; then
              git submodule update --init --recursive
            fi

          elif [ -n "$KERNELSU_SETUP_SCRIPT" ]; then
            if grep -q 'CONFIG_KSU=y' "arch/arm64/configs/$DEFCONFIG"; then
              bash -c "$KERNELSU_SETUP_SCRIPT"
            fi
          fi

      - name: Clean Kernel Source Before Compiling
        run: |
          cd "${{ env.KERNEL_PATH }}"
          make O=out clean
          make O=out mrproper

      - name: Compile the Kernel
        env:
          TOOLCHAINS_PATH: ${{ inputs.toolchains-path }}
          MORE_FLAGS: ${{ inputs.more-flags }}
          DEFCONFIG: ${{ inputs.defconfig }}
        run: |
          cd "${{ env.KERNEL_PATH }}"
          export KBUILD_BUILD_USER="${{ env.USER }}"
          export KBUILD_BUILD_HOST="${{ env.HOST }}"
          export PATH="${{ env.TOOLCHAINS_PATH }}:${PATH}"

          make O=out ARCH=arm64 $DEFCONFIG
          make O=out -j$(nproc --all) $MORE_FLAGS

      - name: Zip the Compiled Kernel
        env:
          ANYKERNEL3_REPO: ${{ inputs.anykernel3-repo }}
        run: |
          git clone --depth=1 $ANYKERNEL3_REPO "${{ env.ANYKERNEL_PATH }}"
          rm -rf ${{ env.ANYKERNEL_PATH }}/.git ${{ env.ANYKERNEL_PATH }}/.github ${{ env.ANYKERNEL_PATH }}/LICENSE ${{ env.ANYKERNEL_PATH }}/README.md

          if [[ -f ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image.gz-dtb ${{ env.ANYKERNEL_PATH }}/Image.gz-dtb

          elif [[ -f ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image-dtb ]]; then
            cp ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image-dtb ${{ env.ANYKERNEL_PATH }}/Image-dtb

          elif [[ -f ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image.gz ]]; then
            cp ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image.gz ${{ env.ANYKERNEL_PATH }}/Image.gz

          elif [[ -f ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image ]]; then
            cp ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/Image ${{ env.ANYKERNEL_PATH }}/Image
          fi

          if [ -f ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/dtbo.img ]; then
            cp ${{ env.KERNEL_PATH }}/out/arch/arm64/boot/dtbo.img ${{ env.ANYKERNEL_PATH }}/dtbo.img
          fi

      - name: Gather Kernel Information for Upload
        env:
          DEFCONFIG: ${{ inputs.defconfig }}
        run: |
          cd "${{ env.KERNEL_PATH }}"
          {
            echo "KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' arch/arm64/configs/$DEFCONFIG | tr -d '"' | sed 's/^-//' | tr -d '\r\n' || echo "perf")"
            echo "KERNEL_VERSION=$(make kernelversion)"
            echo "DATE=$(TZ=Asia/Jakarta date +'%Y%m%d-%H%M%S')"
          } >> $GITHUB_ENV
          echo KERNEL_NAME=$KERNEL_NAME
          echo KERNEL_VERSION=$KERNEL_VERSION
          echo DATE=$DATE

      - name: Upload the Compiled Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.DATE }}
          path: ${{ env.ANYKERNEL_PATH }}/*
