name: Building Kernel

on:
  workflow_dispatch:
    inputs:
      clang-repo: { description: "Enter the URL for the Clang source", type: string }
      gcc64-repo: { description: "Enter URL for the GCC 64-bit source", type: string }
      gcc32-repo: { description: "Enter URL for the GCC 32-bit source", type: string }
      kernel-repo: { description: "Enter URL for the Kernel source", required: true, type: string }
      anykernel3-repo: { description: "Enter URL for the Anykernel3 source", type: string }
      toolchains-path: { description: "Enter the PATH for the Toolchains", required: true, type: string }
      more-flags: { description: "Enter additional build arguments", required: true, type: string }
      defconfig: { description: "Enter config file specific to your device", required: true, type: string }
      build-type: { description: "Enter Build Type for the build", required: true, default: "UNSTABLE", type: choice, options: ["STABLE", "UNSTABLE" ,"KERNELSU", "BOTH"] }
      ksu-setup-script: { description: "Enter URL for the KernelSU setup", type: string }

jobs:
  Build-and-Upload:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Set Up Environment Variables for Build
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLCHAINS_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC_PATH=gcc"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL_PATH=zipper"
            echo "KERNEL_BOOT_PATH=/out/arch/arm64/boot"
            echo "IMAGE={Image.gz-dtb,Image-dtb,Image.gz,Image,dtbo.img}"
            echo "ZIP_NAME=${{ env.KERNEL_NAME }}-${{ env.LINUX_VERSION }}"
            echo "MSG_URL=https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
            echo "DOC_URL=https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument"
            echo "KERNEL_NAME=Unknown"
            echo "LINUX_VERSION=Unknown"
            echo "LATEST_COMMIT=Unknown"
            echo "BRANCH_NAME=Unknown"
            echo "BUILD_TYPE=${{ inputs.build-type }}"
            echo "BUILD_DIFF=0"
            echo "MD5_CHECK=Unknown"
            } >> $GITHUB_ENV

      - name: Get Toolchains
        id: get-toolchains
        run: |
          if [ -n "${{ inputs.clang-repo }}" ] && [ "${{ inputs.clang-repo }}" = "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.clang-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
            echo "Clang, GCC64, and GCC32 URLs are the same, using tools path"
            TOOLCHAINS_REPO=${{ inputs.clang-repo }}
            git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLCHAINS_PATH }}
          elif [ -n "${{ inputs.clang-repo }}" ]; then
            echo "Clang URL detected"
            if [[ "${{ inputs.clang-repo }}" == *.tar.gz ]]; then
            echo "Clang Tarball detected"
              mkdir -p ${{ env.CLANG_PATH }}
              curl -RLO ${{ inputs.clang-repo }}
              tar -C ${{ env.CLANG_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              echo "Clang Repo detected"
              git clone --depth=1 ${{ inputs.clang-repo }} ${{ env.CLANG_PATH }}
            fi
            if [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs detected"
              if [ -n "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.gcc64-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
                echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
                GCC_REPO=${{ inputs.gcc64-repo }}
                git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
              else
                if [[ "${{ inputs.gcc64-repo }}" == *.tar.gz ]]; then
                  echo "GCC 64-bit Tarball detected"
                  mkdir -p ${{ env.GCC64_PATH }}
                  curl -RLO ${{ inputs.gcc64-repo }}
                  tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
                  rm -f *.tar.gz
                else
                  echo "GCC 64-bit Repo detected"
                  git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
                fi
              fi
              if [[ "${{ inputs.gcc32-repo }}" == *.tar.gz ]]; then
                echo "GCC 32-bit Tarball detected"
                mkdir -p ${{ env.GCC32_PATH }}
                curl -RLO ${{ inputs.gcc32-repo }}
                tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                echo "GCC 32-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
              fi
            fi
          elif [ -n "${{ inputs.gcc64-repo }}" ] && [ -n "${{ inputs.gcc32-repo }}" ]; then
            echo "GCC 64-bit and GCC 32-bit URLs detected"
            if [ -n "${{ inputs.gcc64-repo }}" ] && [ "${{ inputs.gcc64-repo }}" = "${{ inputs.gcc32-repo }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
              GCC_REPO=${{ inputs.gcc64-repo }}
              git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
            else
              if [[ "${{ inputs.gcc64-repo }}" == *.tar.gz ]]; then
                echo "GCC 64-bit Tarball detected"
                mkdir -p ${{ env.GCC64_PATH }}
                curl -RLO ${{ inputs.gcc64-repo }}
                tar -C ${{ env.GCC64_PATH }}/ -xf *.tar.gz
                rm -f *.tar.gz
              else
                echo "GCC 64-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc64-repo }} ${{ env.GCC64_PATH }}
              fi
            fi
            if [[ "${{ inputs.gcc32-repo }}" == *.tar.gz ]]; then
              echo "GCC 32-bit Tarball detected"
              mkdir -p ${{ env.GCC32_PATH }}
              curl -RLO ${{ inputs.gcc32-repo }}
              tar -C ${{ env.GCC32_PATH }}/ -xf *.tar.gz
              rm -f *.tar.gz
            else
              echo "GCC 32-bit Repo detected"
              git clone --depth=1 ${{ inputs.gcc32-repo }} ${{ env.GCC32_PATH }}
            fi
          else
            echo "No URLs detected"
            exit 1
          fi

      - name: Clone Kernel Source
        id: clone-kernel
        run: |
          if [ -n "${{ inputs.kernel-repo }}" ]; then
            echo "Kernel Repo detected"
            git clone --depth=1 ${{ inputs.kernel-repo }} ${{ env.KERNEL_PATH }}
          else
            echo "No Kernel Repo detected"
            exit 1
          fi

      - name: Install KernelSU (if build type is KernelSU)
        id: install-ksu
        if: ${{ inputs.build-type == 'KERNELSU' }}
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f ".gitmodules" ]; then
            if grep -q '\b.*KernelSU.*\b' ".gitmodules"; then
              echo "KernelSU submodule detected"
              git submodule update --init --recursive
            else
              echo "No KernelSU submodule detected"
            fi
          elif [ -n "${{ inputs.ksu-setup-script }}" ]; then
            echo "KernelSU setup script detected"
            "${{ inputs.ksu-setup-script }}"
          else
            echo "No KernelSU submodule or setup script detected, skipping KernelSU build"
          fi

      - name: Get Kernel Information
        id: get-info
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f "arch/arm64/configs/${{ inputs.defconfig }}" ]; then
            echo "KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' arch/arm64/configs/${{ inputs.defconfig }} | tr -d '"' | sed 's/^-//' | tr -d '\r\n')" >> $GITHUB_ENV
          fi
          if make kernelversion &>/dev/null; then
            echo "LINUX_VERSION=$(make kernelversion)" >> $GITHUB_ENV
          fi
          if git rev-parse --short HEAD &>/dev/null; then
            echo "LATEST_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
          if git rev-parse --abbrev-ref HEAD &>/dev/null; then
            echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          fi
          if [ -n "$BUILD_END" ] && [ -n "$BUILD_START" ]; then
            echo "BUILD_DIFF=$((BUILD_END - BUILD_START))" >> $GITHUB_ENV
          fi

      - name: Clean Up the Kernel
        id: clean-kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          make O=out clean
          make O=out mrproper

      - name: Compile the Kernel
        id: compile-kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          BUILD_START="$(TZ=Asia/Jakarta date +"%s")"
          export KBUILD_BUILD_USER="${{ env.USER }}"
          export KBUILD_BUILD_HOST="${{ env.HOST }}"
          export PATH="${{ inputs.toolchains-path }}:${PATH}"

          make O=out ARCH=arm64 ${{ inputs.defconfig }}
          make O=out -j$(nproc --all) ${{ inputs.more-flags }} 2>&1 | tee build.log
          BUILD_END="$(TZ=Asia/Jakarta date +"%s")"

      - name: Zip the Compiled Kernel
        id: zip-kernel
        if: -n "${{ inputs.anykernel3-repo }}"
        run: |
          git clone --depth=1 ${{ inputs.anykernel3-repo }} "${{ env.ANYKERNEL_PATH }}"
          rm -rf ${{ env.ANYKERNEL_PATH }}/.git ${{ env.ANYKERNEL_PATH }}/.github ${{ env.ANYKERNEL_PATH }}/LICENSE ${{ env.ANYKERNEL_PATH }}/README.md

          if [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
            cp "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" "${{ env.ANYKERNEL_PATH }}/${{ env.IMAGE }}"
            zip -r9 "${{ env.ZIP_NAME }}".zip
            MD5_CHECK=$(md5sum "${{ env.ZIP_NAME }}.zip" | cut -d' ' -f1)
          else
            echo "${{ env.IMAGE }} not found"
            exit 1
          fi

      - name: Set Build Status and Message
        id: set-notify
        if: success() || failure() || cancelled()
        run: |
          if [ "${{ job.status }}" == "success" ] && [ "$SET_STATUS" == "ZIP_SUCCESS" ]; then
            echo "STATUS=✅ Build Successful!" >> $GITHUB_ENV
          elif [ "${{ job.status }}" == "success" ] && [ "$SET_STATUS" == "IMAGE_SUCCESS" ]; then
            echo "STATUS=✅ Build Successful but Zip file not found!" >> $GITHUB_ENV
          elif [ "${{ job.status }}" == "success" ] && [ "$SET_STATUS" == "NOT_FOUND" ]; then
            echo "STATUS=❌ Build Failed! Image or Zip file not found!" >> $GITHUB_ENV
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "STATUS=❌ Build Failed!" >> $GITHUB_ENV
          elif [ "${{ job.status }}" == "cancelled" ]; then
            echo "STATUS=❌ Build Cancelled!" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.TELEGRAM_TO }}" ] && [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            MESSAGE="${env.STATUS}\nKernel Name: \"${{ env.KERNEL_NAME }}\"\nLinux Version: \"${{ env.LINUX_VERSION }}\"\nLatest Commit: \"${{ env.LATEST_COMMIT }}\"\nBranch Name: \"${{ env.BRANCH_NAME }}\"\nBuild Type: \"${{ env.BUILD_TYPE }}\"\nBuild Time: \"${{ env.BUILD_DIFF }}\""
            if [ "$SET_STATUS" == "ZIP_SUCCESS" ] || [ "$SET_STATUS" == "IMAGE_SUCCESS" ]; then
              MESSAGE+="\nMD5: \"${{ env.MD5_CHECK }}\""
            fi
            echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
          fi

      - name: Notify to Telegram if Build Successful
        id: upload-and-notify-if-success
        if: success()
        run: |
          if [ -n "${{ secrets.TELEGRAM_TO }}" ] && [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            if [ -n "${{ secrets.TOPIC_ID }}" ]; then
              echo "DOC_TOPIC_CHAT=-F message_thread_id=\"${{ secrets.TOPIC_ID }}\"" >> $GITHUB_ENV
            fi
            if [ -s "${{ env.ANYKERNEL_PATH }}/${{ env.ZIP_NAME }}.zip" ]; then
              SET_STATUS="ZIP_SUCCESS"
              echo "Zip file exists, sending ${{ env.ZIP_NAME }}.zip"
              curl -s -X POST -F document=@"${{ env.ANYKERNEL_PATH }}/${{ env.ZIP_NAME }}.zip" "${{ env.DOC_URL }}" -F chat_id="${{ secrets.TELEGRAM_TO }}" "$DOC_TOPIC_CHAT" -F parse_mode="Markdown" -F disable_web_page_preview="true" -F caption="${{ env.MESSAGE }}" &>/dev/null
            elif [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" ]; then
              SET_STATUS="IMAGE_SUCCESS"
              echo "Zip file not found, sending ${{ env.IMAGE }} instead"
              MD5_CHECK=$(md5sum "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" | cut -d  -f1)
              curl -s -X POST -F document=@"${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}" "${{ env.DOC_URL }}" -F chat_id="${{ secrets.TELEGRAM_TO }}" "$DOC_TOPIC_CHAT" -F parse_mode="Markdown" -F disable_web_page_preview="true" -F caption="${{ env.MESSAGE }}" &>/dev/null
            else
              SET_STATUS="NOT_FOUND"
              echo "No Zip file or Image found"
              curl -s -X POST "${{ env.MSG_URL }}" -d chat_id="${{ secrets.TELEGRAM_TO }}" "$MSG_TOPIC_CHAT" -d parse_mode="Markdown" -d disable_web_page_view="true" -d text="${{ env.MESSAGE }}" &>/dev/null
            fi
          else
            echo "No Telegram API keys or Chat ID is valid"
            exit 1
          fi

      - name: Notify to Telegram if Build Failed
        id: upload-and-notify-if-failed
        if: failure() || cancelled()
        run: |
          if [ -n "${{ secrets.TELEGRAM_TO }}" ] && [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            if [ -n "${{ secrets.TOPIC_ID }}" ]; then
              {
              echo "MSG_TOPIC_CHAT=-d message_thread_id=\"${{ secrets.TOPIC_ID }}\""
              echo "DOC_TOPIC_CHAT=-F message_thread_id=\"${{ secrets.TOPIC_ID }}\""
              } >> $GITHUB_ENV
            fi
            if [ -s "${{ env.KERNEL_PATH }}/build.log" ]; then
              SET_STATUS="LOG_FOUND"
              echo "Build log file exists, sending document"
              curl -s -X POST -F document=@"${{ env.KERNEL_PATH }}/build.log" "${{ env.DOC_URL }}" -F chat_id="${{ secrets.TELEGRAM_TO }}" "$DOC_TOPIC_CHAT" -F parse_mode="Markdown" -F disable_web_page_preview="true" -F caption="${{ env.MESSAGE }}" &>/dev/null
            else
              SET_STATUS="LOG_NOT_FOUND"
              echo "Build log file not found, sending message only"
              curl -s -X POST "${{ env.MSG_URL }}" -d chat_id="${{ secrets.TELEGRAM_TO }}" "$MSG_TOPIC_CHAT" -d parse_mode="Markdown" -d disable_web_page_view="true" -d text="${{ env.MESSAGE }}" &>/dev/null
            fi
          else
            echo "No Telegram API keys or Chat ID is valid"
            exit 1
          fi

      - name: Upload Kernel to Artifact
        id: upload-artifact
        if: github.secrets.TELEGRAM_TO == '' || github.secrets.TELEGRAM_TOKEN == '' || github.secrets.TOPIC_ID == '' || !startsWith(github.secrets.TELEGRAM_TO, '-100')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.BUILD_TYPE }}
          path: ${{ env.ANYKERNEL_PATH }}/* || ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ env.IMAGE }}
