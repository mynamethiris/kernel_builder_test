name: Building Kernel

on:
  workflow_dispatch:
    inputs:
      clang-url:
        description: "Enter URL for Clang compiler source (tar.gz or git repository)"
        type: string
      gcc64-url:
        description: "Enter URL for GCC 64-bit compiler source (tar.gz or git repository)"
        type: string
      gcc32-url:
        description: "Enter URL for GCC 32-bit compiler source (tar.gz or git repository)"
        type: string
      kernel-url:
        description: "Enter URL for Kernel source (git repository)"
        required: true
        type: string
      defconfig:
        description: "Enter name of your kernel defconfig"
        required: true
        type: string
      anykernel3-url:
        description: "Enter URL for AnyKernel3 source (git repository)"
        type: string
      arch-type:
        description: "Enter architecture type for the build (e.g. ARCH=arm64 SUBARCH=arm64)"
        required: true
        default: "ARCH=arm64 SUBARCH=arm64"
        type: string
      more-flags:
        description: "Enter additional build arguments or compiler flags"
        required: true
        type: string
      image-type:
        description: "Enter image type for the build (e.g. Image.gz-dtb, Image-dtb, Image.gz, Image, dtbo.img)"
        required: true
        default: "Image.gz-dtb"
        type: string
      ksu-setup-script:
        description: "Enter URL for the KernelSU setup script (alternative to submodule)"
        type: string

jobs:
  Build-and-Upload:
    runs-on: ubuntu-22.04

    steps:
      - name: Set Up Environment Variables for Build
        run: |
          {
            echo "USER=$GITHUB_ACTOR"
            echo "HOST=$(lsb_release -cs)"
            echo "TOOLS_PATH=tools"
            echo "CLANG_PATH=clang"
            echo "GCC_PATH=gcc"
            echo "GCC64_PATH=gcc64"
            echo "GCC32_PATH=gcc32"
            echo "KERNEL_PATH=kernel"
            echo "ANYKERNEL3_PATH=zipper"
            echo "KERNEL_BOOT_PATH=/out/arch/arm64/boot"
          } >> $GITHUB_ENV

      - name: Get Toolchains
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ -n "${{ inputs.clang-url }}" ] && [ "${{ inputs.clang-url }}" == "${{ inputs.gcc64-url }}" ] && [ "${{ inputs.clang-url }}" == "${{ inputs.gcc32-url }}" ]; then
            echo "Clang, GCC64, and GCC32 URLs are the same, using tools path"
            TOOLCHAINS_REPO=${{ inputs.clang-url }}
            echo "TOOLS_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.clang-url }}" == *.tar.* || "${{ inputs.clang-url }}" == *.gz || "${{ inputs.clang-url }}" == *.xz ]]; then
              echo "Toolchains file archive detected"
              mkdir -p ${{ env.TOOLS_PATH }}
              curl -sLO $TOOLCHAINS_REPO
              tar -C ${{ env.TOOLS_PATH }}/ -xf *.*
            else
              echo "Toolchains Repo detected"
              git clone --depth=1 $TOOLCHAINS_REPO ${{ env.TOOLS_PATH }}
            fi
          elif [ -n "${{ inputs.clang-url }}" ]; then
            echo "Clang URL detected"
            echo "CLANG_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.clang-url }}" == *.tar.* || "${{ inputs.clang-url }}" == *.gz || "${{ inputs.clang-url }}" == *.xz ]]; then
              echo "Clang file archive detected"
              mkdir -p ${{ env.CLANG_PATH }}
              curl -sLO ${{ inputs.clang-url }}
              tar -C ${{ env.CLANG_PATH }}/ -xf *.*
            else
              echo "Clang Repo detected"
              git clone --depth=1 ${{ inputs.clang-url }} ${{ env.CLANG_PATH }}
            fi
            if [ -n "${{ inputs.gcc64-url }}" ] && [ -n "${{ inputs.gcc32-url }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs detected"
              if [ "${{ inputs.gcc64-url }}" == "${{ inputs.gcc32-url }}" ]; then
                echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
                GCC_REPO=${{ inputs.gcc64-url }}
                echo "GCC_SET=true" >> $GITHUB_ENV
                if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                  echo "GCC file archive detected"
                  mkdir -p ${{ env.GCC_PATH }}
                  curl -sLO $GCC_REPO
                  tar -C ${{ env.GCC_PATH }}/ -xf *.*
                else
                  echo "GCC Repo detected"
                  git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
                fi
              else
                echo "GCC64_SET=true" >> $GITHUB_ENV
                if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                  echo "GCC 64-bit file archive detected"
                  mkdir -p ${{ env.GCC64_PATH }}
                  curl -sLO ${{ inputs.gcc64-url }}
                  tar -C ${{ env.GCC64_PATH }}/ -xf *.*
                else
                  echo "GCC 64-bit Repo detected"
                  git clone --depth=1 ${{ inputs.gcc64-url }} ${{ env.GCC64_PATH }}
                fi
              fi
              echo "GCC32_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc32-url }}" == *.tar.* || "${{ inputs.gcc32-url }}" == *.gz || "${{ inputs.gcc32-url }}" == *.xz ]]; then
                echo "GCC 32-bit file archive detected"
                mkdir -p ${{ env.GCC32_PATH }}
                curl -sLO ${{ inputs.gcc32-url }}
                tar -C ${{ env.GCC32_PATH }}/ -xf *.*
              else
                echo "GCC 32-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc32-url }} ${{ env.GCC32_PATH }}
              fi
            fi
          elif [ -n "${{ inputs.gcc64-url }}" ] && [ -n "${{ inputs.gcc32-url }}" ]; then
            echo "GCC 64-bit and GCC 32-bit URLs detected"
            if [ "${{ inputs.gcc64-url }}" == "${{ inputs.gcc32-url }}" ]; then
              echo "GCC 64-bit and GCC 32-bit URLs are the same, using gcc path"
              GCC_REPO=${{ inputs.gcc64-url }}
              echo "GCC_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                echo "GCC file archive detected"
                mkdir -p ${{ env.GCC_PATH }}
                curl -sLO $GCC_REPO
                tar -C ${{ env.GCC_PATH }}/ -xf *.*
              else
                echo "GCC Repo detected"
                git clone --depth=1 $GCC_REPO ${{ env.GCC_PATH }}
              fi
            else
              echo "GCC64_SET=true" >> $GITHUB_ENV
              if [[ "${{ inputs.gcc64-url }}" == *.tar.* || "${{ inputs.gcc64-url }}" == *.gz || "${{ inputs.gcc64-url }}" == *.xz ]]; then
                echo "GCC 64-bit file archive detected"
                mkdir -p ${{ env.GCC64_PATH }}
                curl -sLO ${{ inputs.gcc64-url }}
                tar -C ${{ env.GCC64_PATH }}/ -xf *.*
              else
                echo "GCC 64-bit Repo detected"
                git clone --depth=1 ${{ inputs.gcc64-url }} ${{ env.GCC64_PATH }}
              fi
            fi
            echo "GCC32_SET=true" >> $GITHUB_ENV
            if [[ "${{ inputs.gcc32-url }}" == *.tar.* || "${{ inputs.gcc32-url }}" == *.gz || "${{ inputs.gcc32-url }}" == *.xz ]]; then
              echo "GCC 32-bit file archive detected"
              mkdir -p ${{ env.GCC32_PATH }}
              curl -sLO ${{ inputs.gcc32-url }}
              tar -C ${{ env.GCC32_PATH }}/ -xf *.*
            else
              echo "GCC 32-bit Repo detected"
              git clone --depth=1 ${{ inputs.gcc32-url }} ${{ env.GCC32_PATH }}
            fi
          else
            echo "No URLs detected or URLs are not valid, exiting"
            exit 1
          fi

      - name: Set Toolchains Path
        run: |
          cd "$GITHUB_WORKSPACE"
          if [[ "${{ env.TOOLS_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.TOOLS_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC_PATH }}/bin"
          elif [[ "${{ env.GCC_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC64_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC64_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.CLANG_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.CLANG_PATH }}/bin"
          elif [[ "${{ env.GCC64_SET }}" == true ]] && [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin:$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          elif [[ "${{ env.GCC64_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC64_PATH }}/bin"
          elif [[ "${{ env.GCC32_SET }}" == true ]]; then
            TOOLCHAINS_PATH="$GITHUB_WORKSPACE/${{ env.GCC32_PATH }}/bin"
          fi
          if [ "$TOOLCHAINS_PATH" != '' ]; then
            echo "TOOLCHAINS_PATH=$TOOLCHAINS_PATH" >> $GITHUB_ENV
          else
            exit 1
          fi

      - name: Clone Kernel Source
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ -n "${{ inputs.kernel-url }}" ]; then
            echo "Kernel Repo detected"
            git clone --depth=1 ${{ inputs.kernel-url }} ${{ env.KERNEL_PATH }}
            cd "${{ env.KERNEL_PATH }}"
            if [ -f ".gitmodules" ]; then
              git submodule update --init --recursive
            fi
          else
            echo "Kernel URL is not valid, exiting"
            exit 1
          fi

      - name: Install KernelSU (if build type is KernelSU)
        if: inputs.ksu-setup-script != ''
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -f "*KernelSU*" ]; then
            rm -rf *KernelSU*
          fi
          if [ -f "drivers/*kernelsu* "]
            rm -rf drivers/*kernelsu*
          fi
          "${{ inputs.ksu-setup-script }}"

      - name: Get Kernel Information
        run: |
          cd "${{ env.KERNEL_PATH }}"
          if [ -n "$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}" | tr -d '"' | sed 's/^-//' | tr -d '\r\n')" ]; then
            KERNEL_NAME=$(grep -oP 'CONFIG_LOCALVERSION=\K.*' "arch/arm64/configs/${{ inputs.defconfig }}" | tr -d '"' | sed 's/^-//' | tr -d '\r\n')
            echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
          fi
          if [ -n "$(make kernelversion)" ]; then
            KERNEL_VERSION=$(make kernelversion)"
            echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          fi
          if [ -n "$(git log -1 --pretty="%h")" ]; then
            LATEST_COMMIT=$(git log -1 --pretty="%h")"
            echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          fi

          echo "NAME: ${{ env.KERNEL_NAME }}"
          echo "VERSION: ${{ env.KERNEL_VERSION }}"
          echo "TYPE: ${{ inputs.build-type }}"
          echo "COMMIT: ${{ env.LATEST_COMMIT }}"

      - name: Compile the Kernel
        run: |
          cd "${{ env.KERNEL_PATH }}"
          KBUILD_BUILD_USER="${{ env.USER }}"
          KBUILD_BUILD_HOST="${{ env.HOST }}"
          PATH="${{ env.TOOLCHAINS_PATH }}:${PATH}"

          make O=out ${{ inputs.arch-type }} ${{ inputs.defconfig }}
          make O=out -j$(nproc --all) ${{ inputs.more-flags }}
          if [ -f "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" ]; then
            echo "Found Image, build is successful"
          else
            echo "Image not found, exiting"
            exit 1
          fi

      - name: Zip the Compiled Kernel
        if: inputs.anykernel3-url != ''
        run: |
          cd "${{ env.ANYKERNEL3_PATH }}"
          git clone --depth=1 ${{ inputs.anykernel3-url }} "${{ env.ANYKERNEL3_PATH }}"
          if [ -s "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" ]; then
            cp "${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}" "${{ env.ANYKERNEL3_PATH }}/${{ inputs.image-type }}"
            echo "ZIP_NAME=${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
            zip -r9 "${{ env.ZIP_NAME }}" * -x .git README.md anykernel-real.sh .gitignore *.zip
          else
            echo "Image not found or broken, exiting"
            exit 1
          fi

      - name: Sign the Kernel
        if: inputs.anykernel3-url != ''
        run: |
          cd ${{ env.ANYKERNEL3_PATH }}
          curl -sLo zipsigner-3.0.jar https://github.com/Magisk-Modules-url/zipsigner/raw/master/bin/zipsigner-3.0-dexed.jar
          java -jar zipsigner-3.0.jar "${{ env.ZIP_NAME }}".zip

      - name: Upload Kernel to Artifact (if AnyKernel3 URL is provided)
        if: inputs.anykernel3-url != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ANYKERNEL3_PATH }}/${{ env.ZIP_NAME }}.zip

      - name: Upload Kernel to Artifact (if AnyKernel3 URL is not provided)
        if: inputs.anykernel3-url == ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.KERNEL_PATH }}/${{ env.KERNEL_BOOT_PATH }}/${{ inputs.image-type }}
